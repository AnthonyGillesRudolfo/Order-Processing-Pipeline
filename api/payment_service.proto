syntax = "proto3";

package order.sv1;

option go_package = "github.com/AnthonyGillesRudolfo/Order-Processing-Pipeline/gen/order/v1;orderpb";

import "common.proto";

// Payment domain
message ProcessPaymentRequest {
  string order_id = 1;
  PaymentMethod payment_method = 2;
  double amount = 3;
}

message ProcessPaymentResponse {
  string payment_id = 1;
  PaymentStatus status = 2; // from common.proto
  // URL to Xendit's hosted invoice page (if created)
  string invoice_url = 3;
  // Xendit's invoice id (if created)
  string xendit_invoice_id = 4;
}

message PaymentMethod {
  oneof method {
    CreditCard credit_card = 1;
    BankTransfer bank_transfer = 2;
    DigitalWallet digital_wallet = 3;
  }
}

message CreditCard {
  string card_number = 1;
  string expiry_month = 2;
  string expiry_year = 3;
  string cvv = 4;
  string cardholder_name = 5;
}

message BankTransfer {
  string account_number = 1;
  string routing_number = 2;
  string bank_name = 3;
}

message DigitalWallet {
  string wallet_id = 1;
  string provider = 2;
}

service PaymentService {
  rpc ProcessPayment(ProcessPaymentRequest) returns (ProcessPaymentResponse);
  // Simulate marking a payment as completed (no real capture). Idempotent.
  rpc MarkPaymentCompleted(MarkPaymentCompletedRequest) returns (MarkPaymentCompletedResponse);
}

message MarkPaymentCompletedRequest {
  string payment_id = 1;
  string order_id = 2;
}

message MarkPaymentCompletedResponse {
  bool ok = 1;
}
