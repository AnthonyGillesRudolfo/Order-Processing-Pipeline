syntax = "proto3";

package order.sv1;

option go_package = "github.com/AnthonyGillesRudolfo/Order-Processing-Pipeline/gen/order/v1;orderpb";

import "common.proto";

// Orders domain
message Order {
  string id = 1;
  string customer_id = 2;
  repeated OrderItems items = 3;
  OrderStatus status = 4; // from common.proto
  string merchant_id = 5;
}

message OrderItems {
  string product_id = 1;
  int32 quantity = 2;
}

message CreateOrderRequest {
  string customer_id = 1;
  repeated OrderItems items = 2;
  string merchant_id = 3;
}

message CreateOrderResponse {
  string order_id = 1;
  // Optional invoice URL when payment is initiated via Xendit
  string invoice_url = 2;
}

message CheckoutRequest {
  string customer_id = 1;
  repeated OrderItems items = 2;
  string merchant_id = 3;
}

message CheckoutResponse {
  string order_id = 1;
  string payment_id = 2;
  string invoice_link = 3;
  string status = 4;
}

message OnPaymentUpdateRequest {
  string payment_id = 1;
  string status = 2; // "PAID", "EXPIRED", "FAILED"
}

message GetOrderRequest {
  string order_id = 1;
}

message PaymentInfo {
  string payment_id = 1;
  PaymentStatus status = 2; // from common.proto
  double amount = 3;
  string payment_method = 4;
}

message ShipmentInfo {
  string shipment_id = 1;
  string tracking_number = 2;
  string carrier = 3;
  ShipmentStatus status = 4; // from common.proto
  string current_location = 5;
  string estimated_delivery = 6;
}

message GetOrderResponse {
  Order order = 1;
  PaymentInfo payment_info = 2;
  ShipmentInfo shipment_info = 3;
}

message UpdateOrderStatusRequest {
  string order_id = 1;
  OrderStatus status = 2; // from common.proto
}

message UpdateOrderStatusResponse {
  bool success = 1;
  string message = 2;
}

service OrderService {
  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);
  // New checkout method that returns immediately after creating invoice
  rpc Checkout(CheckoutRequest) returns (CheckoutResponse);
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse);
  rpc UpdateOrderStatus(UpdateOrderStatusRequest) returns (UpdateOrderStatusResponse);
  // Continue the order after payment is marked completed
  rpc ContinueAfterPayment(ContinueAfterPaymentRequest) returns (ContinueAfterPaymentResponse);
  // Handle payment status updates from webhooks
  rpc OnPaymentUpdate(OnPaymentUpdateRequest) returns (ContinueAfterPaymentResponse);
  // Cancel an order with saga pattern (only after payment is completed)
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);
  // Manually ship an order (move from PROCESSING to SHIPPED)
  rpc ShipOrder(ShipOrderRequest) returns (ShipOrderResponse);
  // Manually mark order as delivered (move from SHIPPED to DELIVERED)
  rpc DeliverOrder(DeliverOrderRequest) returns (DeliverOrderResponse);
  // Confirm order after delivery (move from DELIVERED to COMPLETED)
  rpc ConfirmOrder(ConfirmOrderRequest) returns (ConfirmOrderResponse);
  // Return order after delivery (move from DELIVERED to RETURNED with refund)
  rpc ReturnOrder(ReturnOrderRequest) returns (ReturnOrderResponse);
}

message ContinueAfterPaymentRequest {
  string order_id = 1;
}

message ContinueAfterPaymentResponse {
  bool ok = 1;
}

message CancelOrderRequest {
  string order_id = 1;
  string reason = 2; // Optional cancellation reason
}

message CancelOrderResponse {
  bool success = 1;
  string message = 2;
  string refund_id = 3; // Xendit refund ID if applicable
}

message ShipOrderRequest {
  string order_id = 1;
  string tracking_number = 2;
  string carrier = 3;
  string service_type = 4;
}

message ShipOrderResponse {
  bool success = 1;
  string message = 2;
  string shipment_id = 3;
}

message DeliverOrderRequest {
  string order_id = 1;
}

message DeliverOrderResponse {
  bool success = 1;
  string message = 2;
}

message ConfirmOrderRequest {
  string order_id = 1;
}

message ConfirmOrderResponse {
  bool success = 1;
  string message = 2;
}

message ReturnOrderRequest {
  string order_id = 1;
  string reason = 2; // Reason for return
}

message ReturnOrderResponse {
  bool success = 1;
  string message = 2;
  string refund_id = 3; // Xendit refund ID if applicable
}
