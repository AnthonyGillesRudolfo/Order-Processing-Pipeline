// Code generated by protoc-gen-go-restate. DO NOT EDIT.
// versions:
// - protoc-gen-go-restate v0.1
// - protoc             v6.32.1
// source: order-pipeline.proto

package orderpb

import (
	fmt "fmt"
	sdk_go "github.com/restatedev/sdk-go"
)

// OrderServiceClient is the client API for order.sv1.OrderService service.
//
// Services
type OrderServiceClient interface {
	CreateOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*CreateOrderRequest, *CreateOrderResponse]
	GetOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*GetOrderRequest, *GetOrderResponse]
	UpdateOrderStatus(opts ...sdk_go.ClientOption) sdk_go.Client[*UpdateOrderStatusRequest, *UpdateOrderStatusResponse]
}

type orderServiceClient struct {
	ctx     sdk_go.Context
	options []sdk_go.ClientOption
}

func NewOrderServiceClient(ctx sdk_go.Context, opts ...sdk_go.ClientOption) OrderServiceClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &orderServiceClient{
		ctx,
		cOpts,
	}
}
func (c *orderServiceClient) CreateOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*CreateOrderRequest, *CreateOrderResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*CreateOrderRequest](sdk_go.Service[*CreateOrderResponse](c.ctx, "order.sv1.OrderService", "CreateOrder", cOpts...))
}

func (c *orderServiceClient) GetOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*GetOrderRequest, *GetOrderResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*GetOrderRequest](sdk_go.Service[*GetOrderResponse](c.ctx, "order.sv1.OrderService", "GetOrder", cOpts...))
}

func (c *orderServiceClient) UpdateOrderStatus(opts ...sdk_go.ClientOption) sdk_go.Client[*UpdateOrderStatusRequest, *UpdateOrderStatusResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*UpdateOrderStatusRequest](sdk_go.Service[*UpdateOrderStatusResponse](c.ctx, "order.sv1.OrderService", "UpdateOrderStatus", cOpts...))
}

// OrderServiceServer is the server API for order.sv1.OrderService service.
// All implementations should embed UnimplementedOrderServiceServer
// for forward compatibility.
//
// Services
type OrderServiceServer interface {
	CreateOrder(ctx sdk_go.Context, req *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrder(ctx sdk_go.Context, req *GetOrderRequest) (*GetOrderResponse, error)
	UpdateOrderStatus(ctx sdk_go.Context, req *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
}

// UnimplementedOrderServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateOrder(ctx sdk_go.Context, req *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method CreateOrder not implemented"), 501)
}
func (UnimplementedOrderServiceServer) GetOrder(ctx sdk_go.Context, req *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method GetOrder not implemented"), 501)
}
func (UnimplementedOrderServiceServer) UpdateOrderStatus(ctx sdk_go.Context, req *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method UpdateOrderStatus not implemented"), 501)
}
func (UnimplementedOrderServiceServer) testEmbeddedByValue() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func NewOrderServiceServer(srv OrderServiceServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewService("order.sv1.OrderService", sOpts...)
	router = router.Handler("CreateOrder", sdk_go.NewServiceHandler(srv.CreateOrder))
	router = router.Handler("GetOrder", sdk_go.NewServiceHandler(srv.GetOrder))
	router = router.Handler("UpdateOrderStatus", sdk_go.NewServiceHandler(srv.UpdateOrderStatus))
	return router
}

// PaymentServiceClient is the client API for order.sv1.PaymentService service.
type PaymentServiceClient interface {
	ProcessPayment(opts ...sdk_go.ClientOption) sdk_go.Client[*ProcessPaymentRequest, *ProcessPaymentResponse]
}

type paymentServiceClient struct {
	ctx     sdk_go.Context
	options []sdk_go.ClientOption
}

func NewPaymentServiceClient(ctx sdk_go.Context, opts ...sdk_go.ClientOption) PaymentServiceClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &paymentServiceClient{
		ctx,
		cOpts,
	}
}
func (c *paymentServiceClient) ProcessPayment(opts ...sdk_go.ClientOption) sdk_go.Client[*ProcessPaymentRequest, *ProcessPaymentResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*ProcessPaymentRequest](sdk_go.Service[*ProcessPaymentResponse](c.ctx, "order.sv1.PaymentService", "ProcessPayment", cOpts...))
}

// PaymentServiceServer is the server API for order.sv1.PaymentService service.
// All implementations should embed UnimplementedPaymentServiceServer
// for forward compatibility.
type PaymentServiceServer interface {
	ProcessPayment(ctx sdk_go.Context, req *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
}

// UnimplementedPaymentServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) ProcessPayment(ctx sdk_go.Context, req *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method ProcessPayment not implemented"), 501)
}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func NewPaymentServiceServer(srv PaymentServiceServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewService("order.sv1.PaymentService", sOpts...)
	router = router.Handler("ProcessPayment", sdk_go.NewServiceHandler(srv.ProcessPayment))
	return router
}

// ShippingServiceClient is the client API for order.sv1.ShippingService service.
type ShippingServiceClient interface {
	CreateShipment(opts ...sdk_go.ClientOption) sdk_go.Client[*CreateShipmentRequest, *CreateShipmentResponse]
	TrackShipment(opts ...sdk_go.ClientOption) sdk_go.Client[*TrackShipmentRequest, *TrackShipmentResponse]
}

type shippingServiceClient struct {
	ctx     sdk_go.Context
	options []sdk_go.ClientOption
}

func NewShippingServiceClient(ctx sdk_go.Context, opts ...sdk_go.ClientOption) ShippingServiceClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &shippingServiceClient{
		ctx,
		cOpts,
	}
}
func (c *shippingServiceClient) CreateShipment(opts ...sdk_go.ClientOption) sdk_go.Client[*CreateShipmentRequest, *CreateShipmentResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*CreateShipmentRequest](sdk_go.Service[*CreateShipmentResponse](c.ctx, "order.sv1.ShippingService", "CreateShipment", cOpts...))
}

func (c *shippingServiceClient) TrackShipment(opts ...sdk_go.ClientOption) sdk_go.Client[*TrackShipmentRequest, *TrackShipmentResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*TrackShipmentRequest](sdk_go.Service[*TrackShipmentResponse](c.ctx, "order.sv1.ShippingService", "TrackShipment", cOpts...))
}

// ShippingServiceServer is the server API for order.sv1.ShippingService service.
// All implementations should embed UnimplementedShippingServiceServer
// for forward compatibility.
type ShippingServiceServer interface {
	CreateShipment(ctx sdk_go.Context, req *CreateShipmentRequest) (*CreateShipmentResponse, error)
	TrackShipment(ctx sdk_go.Context, req *TrackShipmentRequest) (*TrackShipmentResponse, error)
}

// UnimplementedShippingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShippingServiceServer struct{}

func (UnimplementedShippingServiceServer) CreateShipment(ctx sdk_go.Context, req *CreateShipmentRequest) (*CreateShipmentResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method CreateShipment not implemented"), 501)
}
func (UnimplementedShippingServiceServer) TrackShipment(ctx sdk_go.Context, req *TrackShipmentRequest) (*TrackShipmentResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method TrackShipment not implemented"), 501)
}
func (UnimplementedShippingServiceServer) testEmbeddedByValue() {}

// UnsafeShippingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingServiceServer will
// result in compilation errors.
type UnsafeShippingServiceServer interface {
	mustEmbedUnimplementedShippingServiceServer()
}

func NewShippingServiceServer(srv ShippingServiceServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedShippingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewService("order.sv1.ShippingService", sOpts...)
	router = router.Handler("CreateShipment", sdk_go.NewServiceHandler(srv.CreateShipment))
	router = router.Handler("TrackShipment", sdk_go.NewServiceHandler(srv.TrackShipment))
	return router
}
