// Code generated by protoc-gen-go-restate. DO NOT EDIT.
// versions:
// - protoc-gen-go-restate v0.1
// - protoc             v6.32.1
// source: order_service.proto

package orderpb

import (
	fmt "fmt"
	sdk_go "github.com/restatedev/sdk-go"
)

// OrderServiceClient is the client API for order.sv1.OrderService service.
type OrderServiceClient interface {
	CreateOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*CreateOrderRequest, *CreateOrderResponse]
	// New checkout method that returns immediately after creating invoice
	Checkout(opts ...sdk_go.ClientOption) sdk_go.Client[*CheckoutRequest, *CheckoutResponse]
	GetOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*GetOrderRequest, *GetOrderResponse]
	UpdateOrderStatus(opts ...sdk_go.ClientOption) sdk_go.Client[*UpdateOrderStatusRequest, *UpdateOrderStatusResponse]
	// Continue the order after payment is marked completed
	ContinueAfterPayment(opts ...sdk_go.ClientOption) sdk_go.Client[*ContinueAfterPaymentRequest, *ContinueAfterPaymentResponse]
	// Handle payment status updates from webhooks
	OnPaymentUpdate(opts ...sdk_go.ClientOption) sdk_go.Client[*OnPaymentUpdateRequest, *ContinueAfterPaymentResponse]
	// Cancel an order with saga pattern (only after payment is completed)
	CancelOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*CancelOrderRequest, *CancelOrderResponse]
	// Manually ship an order (move from PROCESSING to SHIPPED)
	ShipOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*ShipOrderRequest, *ShipOrderResponse]
	// Manually mark order as delivered (move from SHIPPED to DELIVERED)
	DeliverOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*DeliverOrderRequest, *DeliverOrderResponse]
	// Confirm order after delivery (move from DELIVERED to COMPLETED)
	ConfirmOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*ConfirmOrderRequest, *ConfirmOrderResponse]
	// Return order after delivery (move from DELIVERED to RETURNED with refund)
	ReturnOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*ReturnOrderRequest, *ReturnOrderResponse]
}

type orderServiceClient struct {
	ctx     sdk_go.Context
	options []sdk_go.ClientOption
}

func NewOrderServiceClient(ctx sdk_go.Context, opts ...sdk_go.ClientOption) OrderServiceClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &orderServiceClient{
		ctx,
		cOpts,
	}
}
func (c *orderServiceClient) CreateOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*CreateOrderRequest, *CreateOrderResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*CreateOrderRequest](sdk_go.Service[*CreateOrderResponse](c.ctx, "order.sv1.OrderService", "CreateOrder", cOpts...))
}

func (c *orderServiceClient) Checkout(opts ...sdk_go.ClientOption) sdk_go.Client[*CheckoutRequest, *CheckoutResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*CheckoutRequest](sdk_go.Service[*CheckoutResponse](c.ctx, "order.sv1.OrderService", "Checkout", cOpts...))
}

func (c *orderServiceClient) GetOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*GetOrderRequest, *GetOrderResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*GetOrderRequest](sdk_go.Service[*GetOrderResponse](c.ctx, "order.sv1.OrderService", "GetOrder", cOpts...))
}

func (c *orderServiceClient) UpdateOrderStatus(opts ...sdk_go.ClientOption) sdk_go.Client[*UpdateOrderStatusRequest, *UpdateOrderStatusResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*UpdateOrderStatusRequest](sdk_go.Service[*UpdateOrderStatusResponse](c.ctx, "order.sv1.OrderService", "UpdateOrderStatus", cOpts...))
}

func (c *orderServiceClient) ContinueAfterPayment(opts ...sdk_go.ClientOption) sdk_go.Client[*ContinueAfterPaymentRequest, *ContinueAfterPaymentResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*ContinueAfterPaymentRequest](sdk_go.Service[*ContinueAfterPaymentResponse](c.ctx, "order.sv1.OrderService", "ContinueAfterPayment", cOpts...))
}

func (c *orderServiceClient) OnPaymentUpdate(opts ...sdk_go.ClientOption) sdk_go.Client[*OnPaymentUpdateRequest, *ContinueAfterPaymentResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*OnPaymentUpdateRequest](sdk_go.Service[*ContinueAfterPaymentResponse](c.ctx, "order.sv1.OrderService", "OnPaymentUpdate", cOpts...))
}

func (c *orderServiceClient) CancelOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*CancelOrderRequest, *CancelOrderResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*CancelOrderRequest](sdk_go.Service[*CancelOrderResponse](c.ctx, "order.sv1.OrderService", "CancelOrder", cOpts...))
}

func (c *orderServiceClient) ShipOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*ShipOrderRequest, *ShipOrderResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*ShipOrderRequest](sdk_go.Service[*ShipOrderResponse](c.ctx, "order.sv1.OrderService", "ShipOrder", cOpts...))
}

func (c *orderServiceClient) DeliverOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*DeliverOrderRequest, *DeliverOrderResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*DeliverOrderRequest](sdk_go.Service[*DeliverOrderResponse](c.ctx, "order.sv1.OrderService", "DeliverOrder", cOpts...))
}

func (c *orderServiceClient) ConfirmOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*ConfirmOrderRequest, *ConfirmOrderResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*ConfirmOrderRequest](sdk_go.Service[*ConfirmOrderResponse](c.ctx, "order.sv1.OrderService", "ConfirmOrder", cOpts...))
}

func (c *orderServiceClient) ReturnOrder(opts ...sdk_go.ClientOption) sdk_go.Client[*ReturnOrderRequest, *ReturnOrderResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*ReturnOrderRequest](sdk_go.Service[*ReturnOrderResponse](c.ctx, "order.sv1.OrderService", "ReturnOrder", cOpts...))
}

// OrderServiceServer is the server API for order.sv1.OrderService service.
// All implementations should embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	CreateOrder(ctx sdk_go.Context, req *CreateOrderRequest) (*CreateOrderResponse, error)
	// New checkout method that returns immediately after creating invoice
	Checkout(ctx sdk_go.Context, req *CheckoutRequest) (*CheckoutResponse, error)
	GetOrder(ctx sdk_go.Context, req *GetOrderRequest) (*GetOrderResponse, error)
	UpdateOrderStatus(ctx sdk_go.Context, req *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
	// Continue the order after payment is marked completed
	ContinueAfterPayment(ctx sdk_go.Context, req *ContinueAfterPaymentRequest) (*ContinueAfterPaymentResponse, error)
	// Handle payment status updates from webhooks
	OnPaymentUpdate(ctx sdk_go.Context, req *OnPaymentUpdateRequest) (*ContinueAfterPaymentResponse, error)
	// Cancel an order with saga pattern (only after payment is completed)
	CancelOrder(ctx sdk_go.Context, req *CancelOrderRequest) (*CancelOrderResponse, error)
	// Manually ship an order (move from PROCESSING to SHIPPED)
	ShipOrder(ctx sdk_go.Context, req *ShipOrderRequest) (*ShipOrderResponse, error)
	// Manually mark order as delivered (move from SHIPPED to DELIVERED)
	DeliverOrder(ctx sdk_go.Context, req *DeliverOrderRequest) (*DeliverOrderResponse, error)
	// Confirm order after delivery (move from DELIVERED to COMPLETED)
	ConfirmOrder(ctx sdk_go.Context, req *ConfirmOrderRequest) (*ConfirmOrderResponse, error)
	// Return order after delivery (move from DELIVERED to RETURNED with refund)
	ReturnOrder(ctx sdk_go.Context, req *ReturnOrderRequest) (*ReturnOrderResponse, error)
}

// UnimplementedOrderServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateOrder(ctx sdk_go.Context, req *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method CreateOrder not implemented"), 501)
}
func (UnimplementedOrderServiceServer) Checkout(ctx sdk_go.Context, req *CheckoutRequest) (*CheckoutResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method Checkout not implemented"), 501)
}
func (UnimplementedOrderServiceServer) GetOrder(ctx sdk_go.Context, req *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method GetOrder not implemented"), 501)
}
func (UnimplementedOrderServiceServer) UpdateOrderStatus(ctx sdk_go.Context, req *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method UpdateOrderStatus not implemented"), 501)
}
func (UnimplementedOrderServiceServer) ContinueAfterPayment(ctx sdk_go.Context, req *ContinueAfterPaymentRequest) (*ContinueAfterPaymentResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method ContinueAfterPayment not implemented"), 501)
}
func (UnimplementedOrderServiceServer) OnPaymentUpdate(ctx sdk_go.Context, req *OnPaymentUpdateRequest) (*ContinueAfterPaymentResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method OnPaymentUpdate not implemented"), 501)
}
func (UnimplementedOrderServiceServer) CancelOrder(ctx sdk_go.Context, req *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method CancelOrder not implemented"), 501)
}
func (UnimplementedOrderServiceServer) ShipOrder(ctx sdk_go.Context, req *ShipOrderRequest) (*ShipOrderResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method ShipOrder not implemented"), 501)
}
func (UnimplementedOrderServiceServer) DeliverOrder(ctx sdk_go.Context, req *DeliverOrderRequest) (*DeliverOrderResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method DeliverOrder not implemented"), 501)
}
func (UnimplementedOrderServiceServer) ConfirmOrder(ctx sdk_go.Context, req *ConfirmOrderRequest) (*ConfirmOrderResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method ConfirmOrder not implemented"), 501)
}
func (UnimplementedOrderServiceServer) ReturnOrder(ctx sdk_go.Context, req *ReturnOrderRequest) (*ReturnOrderResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method ReturnOrder not implemented"), 501)
}
func (UnimplementedOrderServiceServer) testEmbeddedByValue() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func NewOrderServiceServer(srv OrderServiceServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewService("order.sv1.OrderService", sOpts...)
	router = router.Handler("CreateOrder", sdk_go.NewServiceHandler(srv.CreateOrder))
	router = router.Handler("Checkout", sdk_go.NewServiceHandler(srv.Checkout))
	router = router.Handler("GetOrder", sdk_go.NewServiceHandler(srv.GetOrder))
	router = router.Handler("UpdateOrderStatus", sdk_go.NewServiceHandler(srv.UpdateOrderStatus))
	router = router.Handler("ContinueAfterPayment", sdk_go.NewServiceHandler(srv.ContinueAfterPayment))
	router = router.Handler("OnPaymentUpdate", sdk_go.NewServiceHandler(srv.OnPaymentUpdate))
	router = router.Handler("CancelOrder", sdk_go.NewServiceHandler(srv.CancelOrder))
	router = router.Handler("ShipOrder", sdk_go.NewServiceHandler(srv.ShipOrder))
	router = router.Handler("DeliverOrder", sdk_go.NewServiceHandler(srv.DeliverOrder))
	router = router.Handler("ConfirmOrder", sdk_go.NewServiceHandler(srv.ConfirmOrder))
	router = router.Handler("ReturnOrder", sdk_go.NewServiceHandler(srv.ReturnOrder))
	return router
}
