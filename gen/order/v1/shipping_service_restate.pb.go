// Code generated by protoc-gen-go-restate. DO NOT EDIT.
// versions:
// - protoc-gen-go-restate v0.1
// - protoc             v6.32.1
// source: shipping_service.proto

package orderpb

import (
	fmt "fmt"
	sdk_go "github.com/restatedev/sdk-go"
)

// ShippingServiceClient is the client API for order.sv1.ShippingService service.
type ShippingServiceClient interface {
	CreateShipment(opts ...sdk_go.ClientOption) sdk_go.Client[*CreateShipmentRequest, *CreateShipmentResponse]
	TrackShipment(opts ...sdk_go.ClientOption) sdk_go.Client[*TrackShipmentRequest, *TrackShipmentResponse]
}

type shippingServiceClient struct {
	ctx     sdk_go.Context
	options []sdk_go.ClientOption
}

func NewShippingServiceClient(ctx sdk_go.Context, opts ...sdk_go.ClientOption) ShippingServiceClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &shippingServiceClient{
		ctx,
		cOpts,
	}
}
func (c *shippingServiceClient) CreateShipment(opts ...sdk_go.ClientOption) sdk_go.Client[*CreateShipmentRequest, *CreateShipmentResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*CreateShipmentRequest](sdk_go.Service[*CreateShipmentResponse](c.ctx, "order.sv1.ShippingService", "CreateShipment", cOpts...))
}

func (c *shippingServiceClient) TrackShipment(opts ...sdk_go.ClientOption) sdk_go.Client[*TrackShipmentRequest, *TrackShipmentResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*TrackShipmentRequest](sdk_go.Service[*TrackShipmentResponse](c.ctx, "order.sv1.ShippingService", "TrackShipment", cOpts...))
}

// ShippingServiceServer is the server API for order.sv1.ShippingService service.
// All implementations should embed UnimplementedShippingServiceServer
// for forward compatibility.
type ShippingServiceServer interface {
	CreateShipment(ctx sdk_go.Context, req *CreateShipmentRequest) (*CreateShipmentResponse, error)
	TrackShipment(ctx sdk_go.Context, req *TrackShipmentRequest) (*TrackShipmentResponse, error)
}

// UnimplementedShippingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShippingServiceServer struct{}

func (UnimplementedShippingServiceServer) CreateShipment(ctx sdk_go.Context, req *CreateShipmentRequest) (*CreateShipmentResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method CreateShipment not implemented"), 501)
}
func (UnimplementedShippingServiceServer) TrackShipment(ctx sdk_go.Context, req *TrackShipmentRequest) (*TrackShipmentResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method TrackShipment not implemented"), 501)
}
func (UnimplementedShippingServiceServer) testEmbeddedByValue() {}

// UnsafeShippingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingServiceServer will
// result in compilation errors.
type UnsafeShippingServiceServer interface {
	mustEmbedUnimplementedShippingServiceServer()
}

func NewShippingServiceServer(srv ShippingServiceServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedShippingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewService("order.sv1.ShippingService", sOpts...)
	router = router.Handler("CreateShipment", sdk_go.NewServiceHandler(srv.CreateShipment))
	router = router.Handler("TrackShipment", sdk_go.NewServiceHandler(srv.TrackShipment))
	return router
}
