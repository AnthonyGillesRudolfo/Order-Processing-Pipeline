// Code generated by protoc-gen-go-restate. DO NOT EDIT.
// versions:
// - protoc-gen-go-restate v0.1
// - protoc             v6.32.1
// source: merchant.proto

package merchantpb

import (
	fmt "fmt"
	sdk_go "github.com/restatedev/sdk-go"
)

// MerchantServiceClient is the client API for merchant.sv1.MerchantService service.
type MerchantServiceClient interface {
	GetMerchant(opts ...sdk_go.ClientOption) sdk_go.Client[*GetMerchantRequest, *Merchant]
	ListItems(opts ...sdk_go.ClientOption) sdk_go.Client[*ListItemsRequest, *ListItemsResponse]
	GetItem(opts ...sdk_go.ClientOption) sdk_go.Client[*GetItemRequest, *Item]
	UpdateStock(opts ...sdk_go.ClientOption) sdk_go.Client[*UpdateStockRequest, *UpdateStockResponse]
	AddItem(opts ...sdk_go.ClientOption) sdk_go.Client[*AddItemRequest, *AddItemResponse]
	UpdateItem(opts ...sdk_go.ClientOption) sdk_go.Client[*UpdateItemRequest, *UpdateItemResponse]
	DeleteItem(opts ...sdk_go.ClientOption) sdk_go.Client[*DeleteItemRequest, *DeleteItemResponse]
}

type merchantServiceClient struct {
	ctx     sdk_go.Context
	options []sdk_go.ClientOption
}

func NewMerchantServiceClient(ctx sdk_go.Context, opts ...sdk_go.ClientOption) MerchantServiceClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &merchantServiceClient{
		ctx,
		cOpts,
	}
}
func (c *merchantServiceClient) GetMerchant(opts ...sdk_go.ClientOption) sdk_go.Client[*GetMerchantRequest, *Merchant] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*GetMerchantRequest](sdk_go.Service[*Merchant](c.ctx, "merchant.sv1.MerchantService", "GetMerchant", cOpts...))
}

func (c *merchantServiceClient) ListItems(opts ...sdk_go.ClientOption) sdk_go.Client[*ListItemsRequest, *ListItemsResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*ListItemsRequest](sdk_go.Service[*ListItemsResponse](c.ctx, "merchant.sv1.MerchantService", "ListItems", cOpts...))
}

func (c *merchantServiceClient) GetItem(opts ...sdk_go.ClientOption) sdk_go.Client[*GetItemRequest, *Item] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*GetItemRequest](sdk_go.Service[*Item](c.ctx, "merchant.sv1.MerchantService", "GetItem", cOpts...))
}

func (c *merchantServiceClient) UpdateStock(opts ...sdk_go.ClientOption) sdk_go.Client[*UpdateStockRequest, *UpdateStockResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*UpdateStockRequest](sdk_go.Service[*UpdateStockResponse](c.ctx, "merchant.sv1.MerchantService", "UpdateStock", cOpts...))
}

func (c *merchantServiceClient) AddItem(opts ...sdk_go.ClientOption) sdk_go.Client[*AddItemRequest, *AddItemResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*AddItemRequest](sdk_go.Service[*AddItemResponse](c.ctx, "merchant.sv1.MerchantService", "AddItem", cOpts...))
}

func (c *merchantServiceClient) UpdateItem(opts ...sdk_go.ClientOption) sdk_go.Client[*UpdateItemRequest, *UpdateItemResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*UpdateItemRequest](sdk_go.Service[*UpdateItemResponse](c.ctx, "merchant.sv1.MerchantService", "UpdateItem", cOpts...))
}

func (c *merchantServiceClient) DeleteItem(opts ...sdk_go.ClientOption) sdk_go.Client[*DeleteItemRequest, *DeleteItemResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*DeleteItemRequest](sdk_go.Service[*DeleteItemResponse](c.ctx, "merchant.sv1.MerchantService", "DeleteItem", cOpts...))
}

// MerchantServiceServer is the server API for merchant.sv1.MerchantService service.
// All implementations should embed UnimplementedMerchantServiceServer
// for forward compatibility.
type MerchantServiceServer interface {
	GetMerchant(ctx sdk_go.Context, req *GetMerchantRequest) (*Merchant, error)
	ListItems(ctx sdk_go.Context, req *ListItemsRequest) (*ListItemsResponse, error)
	GetItem(ctx sdk_go.Context, req *GetItemRequest) (*Item, error)
	UpdateStock(ctx sdk_go.Context, req *UpdateStockRequest) (*UpdateStockResponse, error)
	AddItem(ctx sdk_go.Context, req *AddItemRequest) (*AddItemResponse, error)
	UpdateItem(ctx sdk_go.Context, req *UpdateItemRequest) (*UpdateItemResponse, error)
	DeleteItem(ctx sdk_go.Context, req *DeleteItemRequest) (*DeleteItemResponse, error)
}

// UnimplementedMerchantServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantServiceServer struct{}

func (UnimplementedMerchantServiceServer) GetMerchant(ctx sdk_go.Context, req *GetMerchantRequest) (*Merchant, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method GetMerchant not implemented"), 501)
}
func (UnimplementedMerchantServiceServer) ListItems(ctx sdk_go.Context, req *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method ListItems not implemented"), 501)
}
func (UnimplementedMerchantServiceServer) GetItem(ctx sdk_go.Context, req *GetItemRequest) (*Item, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method GetItem not implemented"), 501)
}
func (UnimplementedMerchantServiceServer) UpdateStock(ctx sdk_go.Context, req *UpdateStockRequest) (*UpdateStockResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method UpdateStock not implemented"), 501)
}
func (UnimplementedMerchantServiceServer) AddItem(ctx sdk_go.Context, req *AddItemRequest) (*AddItemResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method AddItem not implemented"), 501)
}
func (UnimplementedMerchantServiceServer) UpdateItem(ctx sdk_go.Context, req *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method UpdateItem not implemented"), 501)
}
func (UnimplementedMerchantServiceServer) DeleteItem(ctx sdk_go.Context, req *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method DeleteItem not implemented"), 501)
}
func (UnimplementedMerchantServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServiceServer will
// result in compilation errors.
type UnsafeMerchantServiceServer interface {
	mustEmbedUnimplementedMerchantServiceServer()
}

func NewMerchantServiceServer(srv MerchantServiceServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedMerchantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewService("merchant.sv1.MerchantService", sOpts...)
	router = router.Handler("GetMerchant", sdk_go.NewServiceHandler(srv.GetMerchant))
	router = router.Handler("ListItems", sdk_go.NewServiceHandler(srv.ListItems))
	router = router.Handler("GetItem", sdk_go.NewServiceHandler(srv.GetItem))
	router = router.Handler("UpdateStock", sdk_go.NewServiceHandler(srv.UpdateStock))
	router = router.Handler("AddItem", sdk_go.NewServiceHandler(srv.AddItem))
	router = router.Handler("UpdateItem", sdk_go.NewServiceHandler(srv.UpdateItem))
	router = router.Handler("DeleteItem", sdk_go.NewServiceHandler(srv.DeleteItem))
	return router
}
